ID: 1
Methods:
mltk:predictor:glm:ElasticNetLearner-findMaxLambdaGaussian-([[D+[D+D)
mltk:predictor:tree:RegressionTree-multiply-(mltk:predictor:tree:TreeNode+D)
mltk:predictor:glm:RidgeLearner-buildGaussianRegressors-(mltk:core:Instances+Z+I+[D)
mltk:predictor:function:SquareCutter-getPredictor-(mltk:predictor:function:SquareCutter$Table+I+I+[D)
mltk:predictor:gam:SPLAMLearner-doOnePass-([[[D+[D+[D+[D+Z+[Z+[[D+[D+[D+[D+[D+[D+[D+[D)
mltk:predictor:function:Function2D-copy-()
mltk:core:processor:OneHotEncoder-process-(mltk:core:Instances)
mltk:predictor:glm:RidgeLearner-buildGaussianRegressors-([I+[[I+[[D+[D+I+[D)
mltk:predictor:gam:SPLAMLearner-build-(mltk:core:Instances)
mltk:predictor:gam:SPLAMLearner-buildBinaryClassifier-([I+[[I+[[[D+[D+[[D+I+D+D)
mltk:predictor:tree:ensemble:brt:LADBoostLearner-buildRegressor-(mltk:core:Instances+mltk:core:Instances+I+mltk:predictor:evaluation:Metric)
mltk:predictor:glm:RidgeLearner-buildClassifier-(mltk:core:Instances+I+D)
mltk:predictor:glm:LassoLearner-refitGaussianRegressor-([I+[Z+[[I+[[D+[D+I)
mltk:predictor:tree:ensemble:brt:LSBoostLearner-buildRegressor-(mltk:core:Instances+I)
mltk:predictor:glm:GroupLassoLearner-doOnePassBinomial-([[[D+[D+[D+Z+[Z+[[D+[D+[D+[D+[D+[D)
mltk:predictor:function:Function1D-divide-(D)
mltk:core:processor:InstancesSplitter-split-(mltk:core:Instances+D)
mltk:predictor:gam:SPLAMLearner-buildRegressor-(mltk:core:Instances+I+I+D+D)
mltk:predictor:glm:GroupLassoLearner-buildGaussianRegressors-(mltk:core:Instances+Z+java:util:List+I+I+D)
mltk:predictor:tree:ensemble:ag:AdditiveGrovesLearner$ModelMatrix-expand-(I+I+I)
mltk:predictor:function:Function1D-copy-()
mltk:predictor:function:CubicSpline-h-(D+D)
mltk:predictor:tree:ensemble:brt:LogitBoostLearner-buildClassifier-(mltk:core:Instances+I)
mltk:predictor:gam:SPLAMLearner-main-([java:lang:String)
mltk:predictor:tree:ensemble:brt:LogitBoostLearner-build-(mltk:core:Instances)
mltk:predictor:glm:LassoLearner-buildGaussianRegressors-(mltk:core:Instances+I+I+D)
mltk:predictor:tree:RegressionTreeLearner-split-(mltk:predictor:tree:TreeLearner$Dataset+mltk:predictor:tree:TreeInteriorNode+mltk:predictor:tree:TreeLearner$Dataset+mltk:predictor:tree:TreeLearner$Dataset)
mltk:util:StatUtils-mean-([D+I)
mltk:predictor:gam:SPLAMLearner-refitRegressor-([I+[B+[[I+[[[D+[D+[[D+[[D+I)
mltk:predictor:glm:LassoLearner-buildGaussianRegressor-([I+[[D+[D+I+D)
mltk:predictor:gam:tool:Diagnostics-diagnose-(mltk:predictor:gam:GAM+mltk:core:Instances)
mltk:predictor:gam:SPLAMLearner$ModelStructure-hashCode-()
mltk:predictor:tree:ensemble:brt:LADBoostLearner-build-(mltk:core:Instances)
mltk:predictor:glm:ElasticNetLearner-buildGaussianRegressors-(mltk:core:Instances+I+I+D+D)
mltk:util:VectorUtils-dotProduct-(mltk:core:SparseVector+mltk:core:SparseVector)
mltk:predictor:evaluation:Error-eval-([D+[D)
mltk:predictor:gam:SPLAMLearner-buildRegressor-([I+[[I+[[[D+[D+[[D+I+D+D)
mltk:predictor:glm:ElasticNetLearner-buildGaussianRegressors-([I+[[I+[[D+[D+I+I+D+D)
mltk:predictor:glm:RidgeLearner-buildGaussianRegressors-([I+[[D+[D+I+[D)
mltk:predictor:gam:SparseDesignMatrix-createCubicSplineDesignMatrix-(I+[[I+[[D+[D+I)
mltk:predictor:tree:ensemble:brt:LogitBoostLearner-buildBinaryClassifier-(mltk:core:Instances+mltk:core:Instances+I+mltk:predictor:evaluation:Metric)
mltk:predictor:glm:GroupLassoLearner-buildBinaryClassifiers-([[I+[[[D+[D+I+I+D)
mltk:predictor:glm:LassoLearner-buildGaussianRegressors-([I+[[D+[D+I+I+D)
mltk:cmdline:CmdLineParser-processFields-([java:lang:reflect:Field)
mltk:predictor:glm:GroupLassoLearner-buildGaussianRegressors-([[I+[[[D+[D+I+I+D)
mltk:core:Instance-setValue-([I+[D)
mltk:predictor:gam:SPLAMLearner-buildRegressor-(mltk:core:Instances+Z+I+I+D+D)
mltk:predictor:glm:GroupLassoLearner-refitGaussianRegressor-(I+[[I+[Z+[[[I+[[[D+[D+[[D+I)
mltk:predictor:glm:RidgeLearner-buildGaussianRegressor-([I+[[D+[D+I+D)
mltk:util:StatUtils-max-([D)
mltk:core:DenseVector-copy-()
mltk:predictor:glm:GroupLassoLearner-buildGaussianRegressor-([[I+[[[I+[[[D+[D+I+D)